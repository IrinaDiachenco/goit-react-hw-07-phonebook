{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ErrorMessage/ErrorMessage.module.css","components/App/App.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Loader/Loader.module.css","components/ErrorMessage/ErrorMessage.jsx","redux/contact-actions.js","redux/contact-operations.js","redux/contact-selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Loader/Loader.jsx","components/App/App.js","redux/contact-reducer.js","redux/store.js","index.js"],"names":["module","exports","ErrorMessage","message","CSSTransition","appear","in","timeout","classNames","styles","unmountOnExit","className","errorMessage","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","getAllContacts","state","contacts","items","getFilter","filter","selectors","getLoading","loading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","console","log","name","includes","ContactForm","phone","error","handleChangeForm","target","value","setState","handleFormSubmit","e","preventDefault","onAdd","props","validateForm","resetForm","isExistContact","find","setTimeout","this","form","onSubmit","label","input","type","placeholder","onChange","button","errorStyles","Component","connect","dispatch","contact","post","then","data","catch","addContact","onRemove","id","contactId","delete","TransitionGroup","component","list","map","onClick","Preloader","s","loader","color","height","width","App","fetchContacts","isLoading","container","tittle","get","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","store","configureStore","reducer","contactReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,MAAQ,2BAA2B,OAAS,8B,mBCAlID,EAAOC,QAAU,CAAC,aAAe,mCAAmC,OAAS,6BAA6B,aAAe,mCAAmC,KAAO,2BAA2B,WAAa,mC,mBCA3MD,EAAOC,QAAU,CAAC,UAAY,uBAAuB,OAAS,oBAAoB,OAAS,oBAAoB,aAAe,0BAA0B,OAAS,sB,mBCAjKD,EAAOC,QAAU,CAAC,MAAQ,2BAA2B,YAAc,iCAAiC,KAAO,0BAA0B,WAAa,gCAAgC,OAAS,4BAA4B,KAAO,4B,mBCA9ND,EAAOC,QAAU,CAAC,MAAQ,wB,mBCA1BD,EAAOC,QAAU,CAAC,OAAS,yB,wMCmBZC,EAhBM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,cAACC,EAAA,EAAD,CACEC,QAAQ,EACRC,IAAI,EACJC,QAAS,IACTC,WAAYC,IACZC,eAAa,EALf,SAOE,qBAAKC,UAAWF,IAAOG,aAAvB,SACE,4BAAIT,S,wBCDCU,EAAuBC,YAAa,iCACpCC,EAAuBD,YAAa,iCACpCE,EAAqBF,YAAa,+BAElCG,EAAoBH,YAAa,8BACjCI,EAAoBJ,YAAa,8BACjCK,EAAkBL,YAAa,4BAE/BM,EAAuBN,YAAa,iCACpCO,EAAuBP,YAAa,iCACpCQ,EAAqBR,YAAa,+BAElCS,EAAeT,YAAa,yBCbzCU,IAAMC,SAASC,QAAU,wBAElB,I,QCVDC,EAAiB,SAACC,GAAD,OAAWA,EAAMC,SAASC,OAE3CC,EAAY,SAACH,GAAD,OAAWA,EAAMC,SAASG,QAmB7BC,EANG,CACdC,WAlBe,SAACN,GAAD,OAAWA,EAAMC,SAASM,SAmBzCJ,YACAK,mBAduBC,YACzB,CAACV,EAAgBI,IACjB,SAACF,EAAUG,GACT,IAAMM,EAAmBN,EAAOO,cAEhC,OADAC,QAAQC,IAAI,WAAYZ,GACjBA,EAASG,QAAO,qBAAGU,KACnBH,cAAcI,SAASL,SAS9BX,kBCZEiB,E,4MAEFhB,MAAQ,CACJc,KAAM,GACNG,MAAO,GACPC,MAAO,M,EAGXC,iBAAmB,YAAe,IAAbC,EAAY,EAAZA,OACTN,EAAgBM,EAAhBN,KAAMO,EAAUD,EAAVC,MACd,EAAKC,SAAL,eAAiBR,EAAOO,K,EAG5BE,iBAAmB,SAACC,GAChBA,EAAEC,iBADoB,MAGE,EAAKzB,MAArBc,EAHc,EAGdA,KAAMG,EAHQ,EAGRA,MACNS,EAAU,EAAKC,MAAfD,MACe,EAAKE,gBAGxBF,EAAMZ,EAAMG,GACZ,EAAKY,a,EAGbD,aAAe,WAAO,IAAD,EACO,EAAK5B,MAArBc,EADS,EACTA,KAAMG,EADG,EACHA,MADG,EAGW,EAAKU,MAAzBzB,EAHS,EAGTA,MAEF4B,IALW,EAGF7B,SAEmB8B,MAAK,SAAC7B,GAAD,OAAWA,EAAMY,KAAKH,gBAAkBG,EAAKH,iBAGpF,OAFAC,QAAQC,IAAI,QAASX,GAEhBY,GAASG,EAOVa,GACA,EAAKR,SAAS,CAAEJ,MAAO,6BAChBc,YAAW,WACtB,EAAKV,SAAS,CAAEJ,MAAO,SACtB,WAJD,GANI,EAAKI,SAAS,CAAEJ,MAAO,wBAChBc,YAAW,WACtB,EAAKV,SAAS,CAAEJ,MAAO,SAChB,O,EAYXW,UAAY,WACR,EAAKP,SAAS,CAAER,KAAM,GAAIG,MAAO,M,4CAGrC,WAAU,IAAD,EAC0BgB,KAAKjC,MAA5Bc,EADH,EACGA,KAAMG,EADT,EACSA,MAAOC,EADhB,EACgBA,MAErB,OACI,qCACA,uBAAMnC,UAAWF,IAAOqD,KAAMC,SAAUF,KAAKV,iBAA7C,UACI,uBAAOxC,UAAWF,IAAOuD,MAAzB,kBACA,uBAAOrD,UAAWF,IAAOwD,MAAOC,KAAK,OAAOxB,KAAK,OAAOyB,YAAY,aAAalB,MAAOP,EAAM0B,SAAUP,KAAKd,mBAE7G,uBAAOpC,UAAWF,IAAOuD,MAAzB,mBACA,uBAAOrD,UAAWF,IAAOwD,MAAOC,KAAK,MAAMxB,KAAK,QAAQyB,YAAY,qBAAqBlB,MAAOJ,EAAOuB,SAAUP,KAAKd,mBAEtH,wBAAQpC,UAAWF,IAAO4D,OAAQH,KAAK,SAAvC,4BAEJ,cAAC9D,EAAA,EAAD,CACAC,QAAQ,EACRC,GAAc,OAAVwC,EACJvC,QAAS,IACTC,WAAY8D,IACZ5D,eAAa,EALb,SAOA,cAAC,EAAD,CAAcP,QAAS2C,a,GA1ETyB,aA0FXC,eATS,SAAC5C,GAAD,MAAY,CAC5BC,SAAUI,EAAUN,eAAeC,OAGhB,SAAA6C,GAAQ,MAAK,CACpCnB,MAAO,SAACZ,EAAMG,GAAP,OACH4B,EF5EkB,SAAC/B,EAAMG,GAAP,OAAiB,SAAA4B,GACzC,IAAMC,EAAU,CACdhC,OACAG,SAEF4B,EAASxD,KACTO,IACGmD,KAAK,YAAaD,GAClBE,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcJ,EAASvD,EAAkB2D,OAC9CC,OAAM,SAAAhC,GAAK,OAAI2B,EAAStD,EAAgB2B,QEmE5BiC,CAAWrC,EAAMG,QAGnB2B,CAA6C5B,G,yBCnB7C4B,eAxBS,SAAA5C,GAAK,MAAK,CAgBhCC,SAAUI,EAAUG,mBAAmBR,OAGd,SAAA6C,GAAQ,MAAK,CACtCO,SAAU,SAAAC,GAAE,OAAIR,GH5CWS,EG4CYD,EH5CC,SAAAR,GACtCA,EAASrD,KACXI,IACG2D,OADH,oBACuBD,IACpBN,MAAK,kBAAMH,EAASpD,EAAqB6D,OACzCJ,OAAM,SAAAhC,GAAK,OAAI2B,EAASnD,EAAmBwB,UALnB,IAAAoC,MGgDdV,EAxEK,SAAC,GAA4B,IAA1B3C,EAAyB,EAAzBA,SAAUmD,EAAe,EAAfA,SAQ7B,OACE,mCACE,cAACI,EAAA,EAAD,CAAiBC,UAAU,KAAK1E,UAAWF,IAAO6E,KAAlD,SACGzD,EAAS0D,KAAI,YAA0B,IAAvB7C,EAAsB,EAAtBA,KAAMG,EAAgB,EAAhBA,MAAOoC,EAAS,EAATA,GAC5B,OACE,cAAC7E,EAAA,EAAD,CAEEI,WAAYC,IACZF,QAAS,IACTG,eAAa,EAJf,SAME,+BACGgC,EADH,KACWG,EADX,IACkB,wBAAQlC,UAAWF,IAAO4D,OAAQY,GAAIA,EAAIO,QAAS,kBAAMR,EAASC,IAAlE,iBADTA,IALJA,a,iBCArB,I,IASeT,eATS,SAAA5C,GAAK,MAAK,CAChCqB,MAAOhB,EAAUF,UAAUH,GAC3BC,SAAUI,EAAUN,eAAeC,OAGV,SAAA6C,GAAQ,MAAK,CACtCL,SAAU,SAAAhB,GAAC,OAAIqB,EAASlD,EAAa6B,EAAEJ,OAAOC,YAGjCuB,EA1Bf,YAA2C,IAAD,IAAxBvB,aAAwB,MAAhB,GAAgB,EAAZmB,EAAY,EAAZA,SAC5B,OACE,uBACEzD,UAAWF,IAAOwD,MAClBC,KAAK,OACLjB,MAAOA,EACPmB,SAAUA,EACVD,YAAY,6B,mDCTGsB,G,4JAEnB,WACE,OACE,8BACA,cAAC,IAAD,CAAQ9E,UAAW+E,IAAEC,OACpBzB,KAAK,UACJ0B,MAAM,UACNC,OAAQ,IACRC,MAAO,Y,GATwBvB,aCMjCwB,G,uKACJ,WACElC,KAAKN,MAAMyC,kB,oBAEb,WACE,OACA,qCACGnC,KAAKN,MAAM0C,WAAa,cAAC,GAAD,IACzB,sBAAKtF,UAAWF,IAAOyF,UAAvB,UACE,cAAC9F,EAAA,EAAD,CACEE,IAAI,EACJD,QAAQ,EACRG,WAAYC,IACZF,QAAS,IACTG,eAAa,EALf,SAOE,oBAAIC,UAAWF,IAAO0F,OAAtB,yBAGF,cAAC,EAAD,IACA,sBAAKxF,UAAWF,IAAOuB,OAAvB,UACE,8CACA,cAAC,EAAD,OAEF,cAAC,EAAD,c,GAxBUuC,aAwCHC,gBATS,SAAA5C,GAAK,MAAK,CAChCC,SAAUI,EAAUN,eAAeC,GACnCqE,UAAWhE,EAAUC,WAAWN,OAGP,SAAA6C,GAAQ,MAAK,CACtCuB,cAAe,kBAAMvB,GNlCY,SAAAA,GAC/BA,EAAS5D,KACXW,IACG4E,IAAI,aACJxB,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcJ,EAAS1D,EAAqB8D,OACjDC,OAAM,SAAAhC,GAAK,OAAI2B,EAASzD,EAAmB8B,cMgCjC0B,CAA6CuB,I,iBCrCtDjE,GAAQuE,YAAc,IAAD,mBACxBtF,GAAuB,SAACuF,EAAD,YAAMC,WADL,cAExBrF,GAAoB,SAACU,EAAD,YAAU2E,SAAV,oBAAqC3E,OAFjC,cAGxBP,GAAuB,SAACO,EAAD,OAAU2E,EAAV,EAAUA,QAAV,OACtB3E,EAAMI,QAAO,qBAAGiD,KAAgBsB,QAJT,IAOrBvE,GAASqE,YAAc,GAAD,eACzB9E,GAAe,SAAC+E,EAAD,YAAKC,YAGjBpE,GAAUkE,aAAc,GAAD,mBAC1BxF,GAAuB,kBAAM,KADH,cAE1BE,GAAuB,kBAAM,KAFH,cAG1BC,GAAqB,kBAAM,KAHD,cAI1BC,GAAoB,kBAAM,KAJA,cAK1BC,GAAoB,kBAAM,KALA,cAM1BC,GAAkB,kBAAM,KANE,cAO1BC,GAAuB,kBAAM,KAPH,cAQ1BC,GAAuB,kBAAM,KARH,cAS1BC,GAAqB,kBAAM,KATD,IAYdkF,gBAAgB,CAC7B1E,SACAE,UACAG,aCnCIsE,GAAU,aAAOC,eAoBRC,GAZDC,YAAe,CAC3BC,QAAS,CACPhF,SAAUiF,IAEZL,cACAM,UAAUC,ICTZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUR,MAAOA,GAAjB,SAEI,cAAC,GAAD,QAINS,SAASC,eAAe,W","file":"static/js/main.1e57b649.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1ZVxV\",\"label\":\"ContactForm_label__VCxjP\",\"input\":\"ContactForm_input__1koB8\",\"button\":\"ContactForm_button__3tm2h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"ErrorMessage_errorMessage__3LUlJ\",\"appear\":\"ErrorMessage_appear__6QiAv\",\"appearActive\":\"ErrorMessage_appearActive__1N3bs\",\"exit\":\"ErrorMessage_exit__K5X7Z\",\"exitActive\":\"ErrorMessage_exitActive__BCvTG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1VZV7\",\"tittle\":\"App_tittle__1CFBb\",\"appear\":\"App_appear__EGLvD\",\"appearActive\":\"App_appearActive__Ug7yy\",\"filter\":\"App_filter__2Y5HL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"ContactList_enter__2oPzT\",\"enterActive\":\"ContactList_enterActive__2tcV_\",\"exit\":\"ContactList_exit__vZnyF\",\"exitActive\":\"ContactList_exitActive__1AlpS\",\"button\":\"ContactList_button__2d8Z3\",\"list\":\"ContactList_list__1vH4K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__W3YXn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__2RmkF\"};","import React from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport styles from \"./ErrorMessage.module.css\";\r\n\r\nconst ErrorMessage = ({ message }) => {\r\n  return (\r\n    <CSSTransition\r\n      appear={true}\r\n      in={true}\r\n      timeout={250}\r\n      classNames={styles}\r\n      unmountOnExit\r\n    >\r\n      <div className={styles.errorMessage}>\r\n        <p>{message}</p>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;","\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\n// export const addContact = createAction('contacts/add', (name, phone) => ({\r\n//     payload: {\r\n//       id: uuidv4(),\r\n//       name: name,\r\n//       phone: phone,\r\n//     }\r\n// }));\r\n// export const deleteContact = createAction('contacts/delete');\r\n// export const changeFilter = createAction('contacts/changeFilter');\r\n\r\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');","import axios from 'axios';\r\nimport {\r\n  addContactSuccess,\r\n  deleteContactSuccess,\r\n  fetchContactsSuccess,\r\n  addContactRequest,\r\n  deleteContactRequest,\r\n  fetchContactsRequest,\r\n  addContactError,\r\n  deleteContactError,\r\n  fetchContactsError,\r\n} from './contact-actions';\r\naxios.defaults.baseURL = 'http://localhost:3000';\r\n\r\nexport const fetchContacts = () => dispatch => {\r\n    dispatch(fetchContactsRequest());\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nexport const addContact = (name, phone) => dispatch => {\r\n  const contact = {\r\n    name,\r\n    phone,\r\n  };\r\n  dispatch(addContactRequest());\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nexport const deleteContact = contactId => dispatch => {\r\n    dispatch(deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\n// const operations = { fetchContacts, addContact, deleteContact };\r\n\r\n// export default operations;\r\n\r\n// export default { fetchContacts, addContact, deleteContact };","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = (state) => state.contacts.loading;\r\n\r\nconst getAllContacts = (state) => state.contacts.items;\r\n\r\nconst getFilter = (state) => state.contacts.filter;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    console.log('contacts', contacts);\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\nconst selectors = {\r\n    getLoading,\r\n    getFilter,\r\n    getVisibleContacts,\r\n    getAllContacts,\r\n};\r\nexport default selectors;\r\n\r\n// export const getVisibleContacts = state => {\r\n\r\n// const contacts = getAllContacts(state);\r\n// const filter = getFilter(state);\r\n// const normalizedFilter = filter.toLowerCase();\r\n// return contacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n//  };\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\n//import PropTypes from 'prop-types';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport styles from './ContactForm.module.css';\r\nimport errorStyles from '../ErrorMessage/ErrorMessage.module.css';\r\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\r\nimport { connect } from 'react-redux';\r\n//import {addContact} from '../../redux/contact-actions';\r\nimport {addContact} from '../../redux/contact-operations';\r\nimport selectors from '../../redux/contact-selectors';\r\n\r\nclass ContactForm extends Component {\r\n\r\n    state = {\r\n        name: \"\",\r\n        phone: \"\",\r\n        error: null,\r\n    };\r\n\r\n    handleChangeForm = ({target}) => {\r\n        const { name, value } = target\r\n        this.setState({ [name]: value })\r\n    };\r\n\r\n    handleFormSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        const { name, phone } = this.state;\r\n        const { onAdd } = this.props;\r\n        const isValidateForm = this.validateForm()\r\n\r\n        if (!isValidateForm)\r\n            onAdd(name, phone)\r\n            this.resetForm()    \r\n    };\r\n\r\n    validateForm = () => {\r\n        const { name, phone } = this.state;\r\n        \r\n        const { items, contacts } = this.props;  \r\n        //const isExistContact = !!items.find((contacts) => contacts.name.toLowerCase() === name.toLowerCase());\r\n        const isExistContact = !!contacts.find((items) => items.name.toLowerCase() === name.toLowerCase());\r\n        console.log('items', items);\r\n        \r\n        if (!name || !phone) {\r\n            this.setState({ error: 'Some filed is empty' });\r\n            return setTimeout(() => {\r\n        this.setState({ error: null });\r\n            }, 2000);\r\n            \r\n        }\r\n        if (isExistContact) {\r\n            this.setState({ error: 'Contact is already exist' });\r\n            return setTimeout(() => {\r\n        this.setState({ error: null });\r\n      }, 2000);\r\n        }\r\n        \r\n    } \r\n\r\n    resetForm = () => {\r\n        this.setState({ name: '', phone: '' });\r\n    };\r\n\r\n    render() {\r\n        const { name, phone, error } = this.state;\r\n        \r\n        return (\r\n            <> \r\n            <form className={styles.form} onSubmit={this.handleFormSubmit}>\r\n                <label className={styles.label}>name</label>\r\n                <input className={styles.input} type=\"text\" name=\"name\" placeholder=\"Enter name\" value={name} onChange={this.handleChangeForm} />\r\n                \r\n                <label className={styles.label}>phone</label>\r\n                <input className={styles.input} type=\"tel\" name=\"phone\" placeholder=\"Enter phone number\" value={phone} onChange={this.handleChangeForm} />\r\n                \r\n                <button className={styles.button} type='submit'>Add Contact</button>     \r\n                </form>\r\n            <CSSTransition\r\n            appear={true}\r\n            in={error !== null}\r\n            timeout={250}\r\n            classNames={errorStyles}\r\n            unmountOnExit   \r\n            >\r\n            <ErrorMessage message={error} />\r\n        </CSSTransition>\r\n           </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n        contacts: selectors.getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onAdd: (name, phone) =>\r\n        dispatch(addContact(name, phone)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport styles from './ContactList.module.css';\r\nimport { connect } from 'react-redux';\r\n//import { deleteContact } from '../../redux/contact-actions';\r\nimport { deleteContact } from '../../redux/contact-operations';\r\nimport selectors from '../../redux/contact-selectors';\r\n\r\n//class ContactList extends Component {\r\nconst ContactList = ({ contacts, onRemove }) => {\r\n  // static propTypes = {\r\n  //   items: PropTypes.array.isRequired,\r\n  //   onRemove: PropTypes.func.isRequired\r\n  // };\r\n\r\n  //render() {\r\n    //const { items, onRemove } = this.props;\r\n    return (\r\n      <>\r\n        <TransitionGroup component=\"ul\" className={styles.list}>\r\n          {contacts.map(({ name, phone, id }) => {\r\n            return (\r\n              <CSSTransition\r\n                key={id}\r\n                classNames={styles}\r\n                timeout={300}\r\n                unmountOnExit\r\n              >\r\n                <li key={id}>\r\n                  {name}: {phone} <button className={styles.button} id={id} onClick={() => onRemove(id)}>x</button>\r\n                </li>\r\n              </CSSTransition>\r\n            );\r\n          })}\r\n        </TransitionGroup>\r\n      </>\r\n    );\r\n  }\r\n\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      phone: PropTypes.string,\r\n      id: PropTypes.string,\r\n    }),\r\n  ),\r\n  onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\n// const getVisibleContacts = (contacts, filter) => {\r\n//   return contacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(filter.toLowerCase()),\r\n//   );\r\n// };\r\n\r\nconst mapStateToProps = state => ({\r\n  //const { items, filter } = state.contacts;\r\n\r\n  // const visibleContacts = contactSelectors.getVisibleContacts(state);\r\n  // if (visibleContacts.length > 0) {\r\n  //   return { items: visibleContacts };\r\n  // }\r\n  // if (visibleContacts.length === 0) {\r\n  //   return { items: null };\r\n  // }\r\n\r\n  // return { items: contactSelectors.getAllContacts(state) };\r\n  // return {\r\n  //   items: visibleContacts.length > 0 ? visibleContacts : items,\r\n  // };\r\n\r\n  contacts: selectors.getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onRemove: id => dispatch(deleteContact(id)),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react';\r\n//import PropTypes from 'prop-types';\r\nimport styles from './Filter.module.css';\r\nimport { connect } from 'react-redux';\r\nimport { changeFilter } from '../../redux/contact-actions';\r\nimport selectors from '../../redux/contact-selectors';\r\n\r\nfunction Filter({ value = '', onChange }) {\r\n  return (\r\n    <input\r\n      className={styles.input}\r\n      type='text'\r\n      value={value}\r\n      onChange={onChange}\r\n      placeholder='Enter name for Search'\r\n    />\r\n  )\r\n};\r\n\r\n// Filter.propTypes = {\r\n//   value: PropTypes.string,\r\n//   onChange: PropTypes.func.isRequired,\r\n// };\r\n\r\nconst mapStateToProps = state => ({\r\n  value: selectors.getFilter(state),\r\n  contacts: selectors.getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import { Component } from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nimport s from './Loader.module.css';\r\n\r\n\r\nexport default class Preloader extends Component {\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n      <Loader className={s.loader}\r\n       type='Circles'\r\n        color='#3f51b5'\r\n        height={150}\r\n        width={150}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ContactForm from '../ContactForm/ContactForm';\nimport ContactList from '../ContactList/ContactList';\nimport Filter from '../Filter/Filter';\nimport { CSSTransition } from 'react-transition-group';\nimport styles from './App.module.css';\nimport Loader from '../Loader/Loader';\nimport selectors from '../../redux/contact-selectors';\nimport { fetchContacts } from '../../redux/contact-operations';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n  render() {\n    return (\n    <>\n      {this.props.isLoading && <Loader />}\n      <div className={styles.container}>\n        <CSSTransition\n          in={true}\n          appear={true}\n          classNames={styles}\n          timeout={500}\n          unmountOnExit\n        >\n          <h2 className={styles.tittle}>Phonebook</h2>\n        </CSSTransition>\n\n        <ContactForm />\n        <div className={styles.filter}>\n          <h2>find contact</h2>\n          <Filter />\n        </div>\n        <ContactList />\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  contacts: selectors.getAllContacts(state),\n  isLoading: selectors.getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n\n\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport { changeFilter,\r\n  addContactSuccess,\r\n  deleteContactSuccess,\r\n  fetchContactsSuccess,\r\n  addContactRequest,\r\n  deleteContactRequest,\r\n  fetchContactsRequest,\r\n  addContactError,\r\n  deleteContactError,\r\n  fetchContactsError,\r\n} from './contact-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [payload, ...state],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n})\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, {payload}) => payload,\r\n})\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});","\r\nimport contactReducer from './contact-reducer';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n//import storage from 'redux-persist/lib/storage';\r\n\r\nconst middleware = [...getDefaultMiddleware()];\r\n\r\n// const persistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// }\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\n// const pers = { store, persistor };\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/components/App/App';\n//import reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n//import { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}
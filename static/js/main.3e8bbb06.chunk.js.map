{"version":3,"sources":["components/ErrorMessage/ErrorMessage.module.css","components/App/App.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/ErrorMessage/ErrorMessage.jsx","redux/contact-actions.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/App/App.js","redux/contact-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","ErrorMessage","message","CSSTransition","appear","in","timeout","classNames","styles","unmountOnExit","className","errorMessage","addContact","createAction","name","phone","payload","id","uuidv4","deleteContact","changeFilter","ContactForm","state","error","handleChangeForm","target","value","setState","handleFormSubmit","e","preventDefault","onAdd","props","validateForm","resetForm","isExistContact","items","find","contact","toLowerCase","setTimeout","this","form","onSubmit","label","input","type","placeholder","onChange","button","errorStyles","Component","connect","contacts","dispatch","ContactList","onRemove","TransitionGroup","component","list","map","onClick","visibleContacts","filter","includes","getVisibleContacts","length","App","container","tittle","createReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactReducer","devTools","process","pers","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.3e8bbb06.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"ErrorMessage_errorMessage__3LUlJ\",\"appear\":\"ErrorMessage_appear__6QiAv\",\"appearActive\":\"ErrorMessage_appearActive__1N3bs\",\"exit\":\"ErrorMessage_exit__K5X7Z\",\"exitActive\":\"ErrorMessage_exitActive__BCvTG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1VZV7\",\"tittle\":\"App_tittle__1CFBb\",\"appear\":\"App_appear__EGLvD\",\"appearActive\":\"App_appearActive__Ug7yy\",\"filter\":\"App_filter__2Y5HL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"ContactList_enter__2oPzT\",\"enterActive\":\"ContactList_enterActive__2tcV_\",\"exit\":\"ContactList_exit__vZnyF\",\"exitActive\":\"ContactList_exitActive__1AlpS\",\"button\":\"ContactList_button__2d8Z3\",\"list\":\"ContactList_list__1vH4K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__W3YXn\"};","import React from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport styles from \"./ErrorMessage.module.css\";\r\n\r\nconst ErrorMessage = ({ message }) => {\r\n  return (\r\n    <CSSTransition\r\n      appear={true}\r\n      in={true}\r\n      timeout={250}\r\n      classNames={styles}\r\n      unmountOnExit\r\n    >\r\n      <div className={styles.errorMessage}>\r\n        <p>{message}</p>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;","\r\nimport { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n//import contactTypes from './contact-types';\r\n\r\n// export const addContact = (name, phone) => ({\r\n//     type: contactTypes.ADD,\r\n//     payload: {\r\n//         id: uuidv4(),\r\n//         name: name,\r\n//         phone: phone,\r\n//     }\r\n// });\r\n\r\nexport const addContact = createAction('contacts/add', (name, phone) => ({\r\n    payload: {\r\n      id: uuidv4(),\r\n      name: name,\r\n      phone: phone,\r\n    }\r\n}));\r\n\r\n// export const deleteContact = contactId => ({\r\n//   type: contactTypes.DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\nexport const deleteContact = createAction('contacts/delete');\r\n\r\n// export const changeFilter = (filter) => ({\r\n//   type: contactTypes.CHANGE_FILTER,\r\n//   payload: { filter },\r\n// });\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n\r\n","import React, { Component } from 'react';\r\n//import { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport styles from './ContactForm.module.css';\r\nimport errorStyles from '../ErrorMessage/ErrorMessage.module.css';\r\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\r\nimport { connect } from 'react-redux';\r\nimport {addContact} from '../../redux/contact-actions';\r\n\r\nclass ContactForm extends Component {\r\n//   static propTypes = {\r\n//     contacts: PropTypes.array.isRequired,\r\n//     filter: PropTypes.string,\r\n//     error: PropTypes.string,\r\n//   };\r\n    \r\n    static propTypes = {\r\n    onAdd: PropTypes.func.isRequired,\r\n  };\r\n\r\n    state = {\r\n        name: \"\",\r\n        phone: \"\",\r\n        error: null,\r\n    };\r\n\r\n    handleChangeForm = ({target}) => {\r\n        const { name, value } = target\r\n        this.setState({ [name]: value })\r\n    };\r\n\r\n    handleFormSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        const { name, phone } = this.state;\r\n        const { onAdd } = this.props;\r\n        const isValidateForm = this.validateForm()\r\n\r\n        if (!isValidateForm)\r\n            onAdd(name, phone)\r\n            this.resetForm()    \r\n    };\r\n\r\n    validateForm = () => {\r\n        const { name, phone } = this.state;\r\n        // const { contacts } = this.props\r\n        // const isExistContact = !!contacts.find((item) => item.name === name);\r\n              \r\nconst { items } = this.props\r\n        const isExistContact = !!items.find((contact) => contact.name.toLowerCase() === name.toLowerCase());\r\n\r\n        if (!name || !phone) {\r\n            //alert('Some filed is empty')\r\n            this.setState({ error: 'Some filed is empty' });\r\n            return setTimeout(() => {\r\n        this.setState({ error: null });\r\n      }, 2000);\r\n        }\r\n        if (isExistContact) {\r\n            //alert('Contact is already exist');\r\n            this.setState({ error: 'Contact is already exist' });\r\n            return setTimeout(() => {\r\n        this.setState({ error: null });\r\n      }, 2000);\r\n        }\r\n    } \r\n\r\n    resetForm = () => {\r\n        this.setState({ name: '', phone: '' });\r\n    };\r\n\r\n    render() {\r\n        const { name, phone, error } = this.state;\r\n        //const { contacts } = this.props;\r\n        return (\r\n            <> \r\n            <form className={styles.form} onSubmit={this.handleFormSubmit}>\r\n                <label className={styles.label}>name</label>\r\n                <input className={styles.input} type=\"text\" name=\"name\" placeholder=\"Enter name\" value={name} onChange={this.handleChangeForm} />\r\n                \r\n                <label className={styles.label}>phone</label>\r\n                <input className={styles.input} type=\"tel\" name=\"phone\" placeholder=\"Enter phone number\" value={phone} onChange={this.handleChangeForm} />\r\n                \r\n                <button className={styles.button} type='submit'>Add Contact</button>     \r\n                </form>\r\n            <CSSTransition\r\n            appear={true}\r\n            in={error !== null}\r\n            timeout={250}\r\n            classNames={errorStyles}\r\n            unmountOnExit   \r\n            >\r\n            <ErrorMessage message={error} />\r\n        </CSSTransition>\r\n           </>\r\n        )\r\n    }\r\n}\r\n\r\nContactForm.propTypes = {\r\n        name: PropTypes.string,\r\n        phone: PropTypes.number,\r\n        onCheckUnique: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        items: state.contacts.items,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onAdd: (name, phone) => dispatch(addContact(name, phone)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport styles from './ContactList.module.css';\r\nimport { connect } from 'react-redux';\r\nimport { deleteContact } from '../../redux/contact-actions';\r\n\r\n// const ContactListItem = ({ id, name, phone, onRemove }) => {\r\n//     return (\r\n//         <li key={id}>\r\n//         {name}: {phone} <button className={styles.button} id={id} onClick={() => onRemove(id)}>x</button>\r\n//         </li>\r\n    \r\n//     )\r\n// };\r\n\r\nclass ContactList extends Component {\r\n  static propTypes = {\r\n    items: PropTypes.array.isRequired,\r\n    onRemove: PropTypes.func.isRequired\r\n  };\r\n\r\n  render() {\r\n    const { items, onRemove } = this.props;\r\n    // const ContactList = ({ contacts, onRemove}) => {\r\n    //     if (contacts.length === 0) return null\r\n    return (\r\n      <TransitionGroup component=\"ul\" className={styles.list}>\r\n        {/* {contacts.map(({ name, phone, id }) => { */}\r\n        {items.map(({name, phone, id}) => {\r\n          return (\r\n            <CSSTransition\r\n              key={id}\r\n              classNames={styles}\r\n              timeout={300}\r\n              unmountOnExit\r\n            >\r\n              {/* <ContactListItem /> */}\r\n              <li key={id}>\r\n                {name}: {phone} <button className={styles.button} id={id} onClick={() => onRemove(id)}>x</button>\r\n              </li>\r\n            </CSSTransition>\r\n          );\r\n        })}\r\n      </TransitionGroup>\r\n    );\r\n  }\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      phone: PropTypes.string,\r\n      id: PropTypes.string,\r\n    }),\r\n  ),\r\n  onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nconst getVisibleContacts = (contacts, filter) => {\r\n  return contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const { items, filter } = state.contacts;\r\n\r\n  const visibleContacts = getVisibleContacts(items, filter);\r\n\r\n  return {\r\n    //items: visibleContacts,\r\n    items: visibleContacts.length > 0 ? visibleContacts : items,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onRemove: id => dispatch(deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n//import { v4 as uuidv4 } from 'uuid';\r\nimport styles from './Filter.module.css';\r\nimport { connect } from 'react-redux';\r\nimport { changeFilter } from '../../redux/contact-actions';\r\n\r\n// function Filter({ filter, onChange }) {\r\n//   //const id = uuidv4();\r\n//   return (\r\n//     <input\r\n//       className={styles.input}\r\n//       type='text'\r\n//       name='filter'\r\n//       value={filter}\r\n//       //onChange={({ target }) => onChange(target.value)}\r\n//       onChange={onChange}\r\n//       placeholder='Enter name for Search'\r\n//       //id={id}\r\n//     />\r\n//   )\r\n// };\r\n\r\n// Filter.propTypes = {\r\n//   filter: PropTypes.string,\r\n//   onChange: PropTypes.func.isRequired,\r\n// };\r\n\r\n// const mapStateToProps = state => ({\r\n//   filter: state.contacts.filter,\r\n//   items: state.contacts.items,\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: e => dispatch(changeFilter(e.target.filter)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nfunction Filter({ value = '', onChange }) {\r\n  //const id = uuidv4();\r\n  return (\r\n    <input\r\n      className={styles.input}\r\n      type='text'\r\n      //name='filter'\r\n      value={value}\r\n      //onChange={({ target }) => onChange(target.value)}\r\n      onChange={onChange}\r\n      placeholder='Enter name for Search'\r\n      //id={id}\r\n    />\r\n  )\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.contacts.filter,\r\n  items: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\n//import { v4 as uuidv4 } from 'uuid';\n//import PropTypes from 'prop-types';\nimport ContactForm from '../ContactForm/ContactForm';\nimport ContactList from '../ContactList/ContactList';\nimport Filter from '../Filter/Filter';\nimport { CSSTransition } from 'react-transition-group';\nimport styles from './App.module.css';\n\nexport default function App(props) {\n//  static defaultProps = {\n//     name: '',\n//     number: '',\n//   };\n  // state = {\n  //   contacts: [ ],\n  //   filter: '',\n  //}\n\n  // handleAddContact = (newContact) =>\n  //   this.setState(prevState => ({\n  //   contacts: [...prevState.contacts, newContact],\n  // }))\n\n  // handleRemoveContact = (id) => {\n  //   this.setState(prevState => {\n  //     return {\n  //       contacts: prevState.contacts.filter((contact) => contact.id !== id)\n  //     }\n  //   })\n  // }\n  \n  // handleFilterChange = (filter) => this.setState({ filter })\n  \n  // getVisibleContacts = () => {\n  //   const { contacts, filter } = this.state;\n  //   return contacts.filter((contact) => contact.name.toLowerCase().includes(filter.toLowerCase()),\n  //   );\n  // }\n\n  //   componentDidMount() {\n  //   const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\n  //   if (parsedContacts) {\n  //     this.setState(() => {\n  //       return {\n  //         contacts: parsedContacts,\n  //       };\n  //     });\n  //   }  \n  // }\n\n  // componentDidUpdate(prevState) {\n  //   if (prevState.contacts !== this.state.contacts) {\n  //       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n// render() {\n    //const { filter } = this.state\n    //const visibleContacts = this.getVisibleContacts();\n    return (\n      <div className={styles.container}>\n      <CSSTransition\n        in={true}\n        appear={true}\n        classNames={styles}\n        timeout={500}\n        unmountOnExit\n        >\n        <h2 className={styles.tittle}>Phonebook</h2>\n      </CSSTransition>\n\n      <ContactForm />\n      <div className={styles.filter}>\n        <h2>find contact</h2>\n      <Filter />\n        </div>\n      <ContactList />\n  </div>\n    );\n   }\n// }\n\n\n","\r\n//import contactTypes from './contact-types';\r\nimport { createReducer, combineReducers } from '@reduxjs/toolkit';\r\nimport { addContact, deleteContact, changeFilter } from './contact-actions';\r\n\r\nconst items = createReducer([], {\r\n  [addContact]: (state, { payload }) => [payload, ...state],\r\n  [deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n})\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case contactTypes.ADD:\r\n//       return [payload, ...state];\r\n\r\n//     case contactTypes.DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, {payload}) => payload,\r\n})\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case contactTypes.CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});","//import { combineReducers } from 'redux';\r\nimport contactReducer from './contact-reducer';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: persistReducer(persistConfig, contactReducer),\r\n// });\r\n\r\n//const store = createStore(rootReducer, composeWithDevTools());\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n}),\r\n  logger,\r\n];\r\n\r\nconst persistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n}\r\n\r\n//const persistReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(persistConfig, contactReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nconst pers = { store, persistor };\r\n\r\nexport default pers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/components/App/App';\n//import reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1ZVxV\",\"label\":\"ContactForm_label__VCxjP\",\"input\":\"ContactForm_input__1koB8\",\"button\":\"ContactForm_button__3tm2h\"};"],"sourceRoot":""}